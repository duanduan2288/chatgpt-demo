---
import Layout from '../layouts/Layout.astro'
if (Astro.locals.user) return Astro.redirect('/');
---

<Layout title="Password Protection">
  <main class="h-screen col-fcc">
    <div class="op-30">登录</div>
    <div id="input_container" class="mt-4">
      <form method="POST" action="/api/login">
        <div class="mt-2">
          <input
            id="username_input"
            placeholder="请输入用户名"
            type="text"
            name="username"
            class="gpt-password-input"
          />
        </div>
        <div class="mt-2">
          <input
            id="password_input"
            placeholder="请输入密码"
            type="password"
            name="password"
            class="gpt-password-input"
          />
        </div>
        <div id="submit" class="mt-2">
          <button type="submit" class="gpt-password-btn">登录</button>
        </div>
      </form>

    </div>
    <p id="form-error" class="form-error"></p>
    <a class="b-slate-link" href="/signup">去注册</a>
  </main>
</Layout>

<script>
// const inputContainer = document.getElementById(
//   'input_container',
// ) as HTMLDivElement
// const input = document.getElementById('password_input') as HTMLInputElement
// const usernameinput = document.getElementById('username_input') as HTMLInputElement
// const submitButton = document.getElementById('submit') as HTMLDivElement
// input.onkeydown = async(event) => {
//   if (event.key === 'Enter') handleSubmit()
// }
// submitButton.onclick = handleSubmit
// async function handleSubmit() {
//   const password = input.value
//   const username = usernameinput.value
//   const response = await fetch('/api/auth', {
//     method: 'POST',
//     headers: {
//       'Content-Type': 'application/json',
//     },
//     body: JSON.stringify({
//       pass: password,
//       username,
//     }),
//   })
//   const responseJson = await response.json()
//   if (responseJson.code === 0) {
//     localStorage.setItem('pass', password)
//     window.location.href = '/'
//   } else {
//     inputContainer.classList.add('invalid')
//     setTimeout(() => {
//       inputContainer.classList.remove('invalid')
//     }, 300)
//   }
// }

const errorMessageElement = document.getElementById('form-error')!
document.forms[0].addEventListener('submit', async(e) => {
  e.preventDefault()
  errorMessageElement.innerText = ''
  const formElement = e.target as HTMLFormElement
  const response = await fetch(formElement.action, {
    method: formElement.method,
    body: new FormData(formElement),
  })
  if (response.ok) window.location.href = '/'
  else errorMessageElement.innerText = (await response.json()).error
})
</script>

<style>
  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(0.5rem);
    }
    75% {
      transform: translateX(-0.5rem);
    }
    100% {
      transform: translateX(0);
    }
  }

  .invalid {
    animation: shake 0.2s ease-in-out 0s 2;
  }

  .form-error {
    color: red;
  }
 .mt-2 button,
  [type="button"],
  [type="reset"],
  [type="submit"] {
     background-color: rgba(148, 163, 184, var(--un-bg-opacity));
    --un-bg-opacity: 0.2;
  }
  .gpt-password-btn {
    width: 100%;
    height: 3rem;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.75rem;
    padding-bottom: 0.75rem;
  }
</style>
